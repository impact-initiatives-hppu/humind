[{"path":"https://impact-initiatives-hppu.github.io/humind/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 humind authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://impact-initiatives-hppu.github.io/humind/articles/hh-indicators.html","id":"sanitation","dir":"Articles","previous_headings":"","what":"Sanitation","title":"Household-level indicators","text":"","code":"# Category of sanitation facilities main <- add_sanitation_facility_cat(main) main |> select(wash_sanitation_facility, wash_sanitation_facility_cat) |> distinct() |> head(100) #> # A tibble: 20 × 2 #>    wash_sanitation_facility    wash_sanitation_facility_cat #>    <chr>                       <chr>                        #>  1 NA                          NA                           #>  2 pit_latrine_wo_slab         unimproved                   #>  3 bucket                      unimproved                   #>  4 compost                     improved                     #>  5 hanging_toilet              unimproved                   #>  6 container                   improved                     #>  7 dnk                         undefined                    #>  8 flush_open_drain            unimproved                   #>  9 twin_pit_latrine_slab       improved                     #> 10 ventilated_pit_latrine_slab improved                     #> 11 pnta                        undefined                    #> 12 flush_septic_tank           improved                     #> 13 flush_dnk_where             improved                     #> 14 pit_latrine_slab            improved                     #> 15 flush_elsewhere             unimproved                   #> 16 flush_piped_sewer           improved                     #> 17 plastic_bag                 unimproved                   #> 18 other                       undefined                    #> 19 none                        none                         #> 20 flush_pit_latrine           improved  # Sharing the sanitation facility main <- add_sharing_sanitation_facility_cat(main) main |> select(wash_sanitation_facility_sharing_yn, wash_sharing_sanitation_facility_cat) |> distinct() |> head(100) #> # A tibble: 5 × 2 #>   wash_sanitation_facility_sharing_yn wash_sharing_sanitation_facility_cat #>   <chr>                               <chr>                                #> 1 NA                                  NA                                   #> 2 dnk                                 undefined                            #> 3 no                                  not_shared                           #> 4 yes                                 shared                               #> 5 pnta                                undefined  # Number of individuals sharing the sanitation facility main <- add_sharing_sanitation_facility_num_ind(main) main |> select(wash_sanitation_facility_sharing_yn, hh_size, wash_sanitation_facility_sharing_n, wash_sharing_sanitation_facility_n_ind) |> distinct() |> head(100) #> # A tibble: 27 × 4 #>    wash_sanitation_facil…¹ hh_size wash_sanitation_faci…² wash_sharing_sanitat…³ #>    <chr>                     <dbl>                  <dbl> <chr>                  #>  1 NA                           NA                    NA  NA                     #>  2 dnk                           3                    NA  NA                     #>  3 no                            4                     4  19 and below           #>  4 yes                           4                   253. 50_and_above           #>  5 pnta                          4                    NA  NA                     #>  6 yes                           4                   347. 50_and_above           #>  7 yes                           4                   114. 50_and_above           #>  8 dnk                           4                    NA  NA                     #>  9 pnta                          5                    NA  NA                     #> 10 no                            5                     5  19 and below           #> # ℹ 17 more rows #> # ℹ abbreviated names: ¹​wash_sanitation_facility_sharing_yn, #> #   ²​wash_sanitation_facility_sharing_n, #> #   ³​wash_sharing_sanitation_facility_n_ind"},{"path":"https://impact-initiatives-hppu.github.io/humind/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Guillaume Noblet. Author, maintainer.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Noblet G (2024). humind: Calculate Usual Humanitarian Composite Indicators. R package version 0.1.9000,  https://gnoblet.github.io/humind/, https://github.com/gnoblet/humind.","code":"@Manual{,   title = {humind: Calculate Usual Humanitarian Composite Indicators},   author = {Guillaume Noblet},   year = {2024},   note = {R package version 0.1.9000,  https://gnoblet.github.io/humind/},   url = {https://github.com/gnoblet/humind}, }"},{"path":"https://impact-initiatives-hppu.github.io/humind/index.html","id":"humind","dir":"","previous_headings":"","what":"Calculate Usual Humanitarian Composite Indicators","title":"Calculate Usual Humanitarian Composite Indicators","text":"package gives helpers calculate usual humanitarian composite indicators MSNAs. Expect many breaking changes moving towards consistent coherent package 2024 MSNAs Food security indicators imported impactR4PHU, potentially Public Health functions.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Calculate Usual Humanitarian Composite Indicators","text":"can install development version humind like :","code":"devtools::install_github(\"impact-initiatives-hppu/humind\")"},{"path":"https://impact-initiatives-hppu.github.io/humind/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Calculate Usual Humanitarian Composite Indicators","text":"construction.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_age_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Add categories of age — add_age_cat","title":"Add categories of age — add_age_cat","text":"add_age_cat() adds age categories add_age_18_cat() adds age categories dummy variable 18.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_age_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add categories of age — add_age_cat","text":"","code":"add_age_cat(   df,   age_col,   breaks = seq(14, 100, by = 5),   labels = NULL,   int_undefined = c(-999, 999),   char_undefined = \"undefined\",   new_colname = NULL )  add_age_18_cat(   df,   age_col,   int_undefined = c(-999, 999),   char_undefined = \"undefined\",   new_colname = NULL )"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_age_cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add categories of age — add_age_cat","text":"df dataframe. age_col column name recategorize. breaks vector cut points. labels vector labels. NULL, labels breaks. int_undefined vector values undefined (-999, 999) replace char_undefined. char_undefined character replace int_undefined values, often values corresponding know Pre. new_colname name new column. NULL, adds \"_cat\" age_col (\"_18_cat add_age_18_cat()).","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_age_cat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add categories of age — add_age_cat","text":"add_age_18_cat() adds two columns dataframe: one categories (minor, major) one dummy variable 18.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_dummy_from_dummies.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a dummy variable from dummies — add_dummy_from_dummies","title":"Add a dummy variable from dummies — add_dummy_from_dummies","text":"Add dummy variable dummies","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_dummy_from_dummies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a dummy variable from dummies — add_dummy_from_dummies","text":"","code":"add_dummy_from_dummies(   df,   dummy_name = \"dummy_from_dummies\",   ...,   na_to_zero = FALSE )"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_dummy_from_dummies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a dummy variable from dummies — add_dummy_from_dummies","text":"df data frame dummy_name new dummy column name ... Dummy columns df, must set c(0,1). na_to_zero Boolean. Mutate NA values zero.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_dummy_from_dummies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a dummy variable from dummies — add_dummy_from_dummies","text":"update data frame new dummy column.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_dummy_from_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a dummy variable when any string from a set of strings — add_dummy_from_set","title":"Add a dummy variable when any string from a set of strings — add_dummy_from_set","text":"Add dummy variable string set strings","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_dummy_from_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a dummy variable when any string from a set of strings — add_dummy_from_set","text":"","code":"add_dummy_from_set(df, col, dummy_name, set, na_to_zero = FALSE)"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_dummy_from_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a dummy variable when any string from a set of strings — add_dummy_from_set","text":"df data frame col column dummy_name new dummy column name set vector strings detect , c(\"string1\", \"string2\") na_to_zero Boolean. Convert NAs zeros .","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_dummy_from_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a dummy variable when any string from a set of strings — add_dummy_from_set","text":"update data frame new dummy column.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_num_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Add categories for a numeric variable — add_num_cat","title":"Add categories for a numeric variable — add_num_cat","text":"Add categories numeric variable","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_num_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add categories for a numeric variable — add_num_cat","text":"","code":"add_num_cat(   df,   num_col,   breaks,   labels = NULL,   int_undefined = c(-999, 999),   char_undefined = \"Unkown\",   new_colname = NULL,   include_lowest = TRUE )"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_num_cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add categories for a numeric variable — add_num_cat","text":"df dataframe. num_col column name recategorize. breaks vector cut points. labels vector labels. int_undefined vector values replace char_dontknow. char_undefined character replace int_dontknow values. new_colname name new column. include_lowest Logical. Include lowest value interval.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_num_cat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add categories for a numeric variable — add_num_cat","text":"dataframe new column.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_roster_wgq_ss.html","id":null,"dir":"Reference","previous_headings":"","what":"Add summarized individual WG-SS data to the household data — add_roster_wgq_ss","title":"Add summarized individual WG-SS data to the household data — add_roster_wgq_ss","text":"Add summarized individual WG-SS data household data","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_roster_wgq_ss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add summarized individual WG-SS data to the household data — add_roster_wgq_ss","text":"","code":"add_roster_wgq_ss(   roster,   hh,   id_col = \"uuid\",   wgq_disability = \"wgq_disability\",   wgq_disability_3 = \"wgq_disability_3\",   wgq_disability_4 = \"wgq_disability_4\",   wgq_vision_3 = \"wgq_vision_3\",   wgq_hearing_3 = \"wgq_hearing_3\",   wgq_mobility_3 = \"wgq_mobility_3\",   wgq_cognition_3 = \"wgq_cognition_3\",   wgq_self_care_3 = \"wgq_self_care_3\",   wgq_communication_3 = \"wgq_communication_3\",   wgq_vision_4 = \"wgq_vision_4\",   wgq_hearing_4 = \"wgq_hearing_4\",   wgq_mobility_4 = \"wgq_mobility_4\",   wgq_cognition_4 = \"wgq_cognition_4\",   wgq_self_care_4 = \"wgq_mobility_4\",   wgq_communication_4 = \"wgq_communication_4\" )"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_roster_wgq_ss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add summarized individual WG-SS data to the household data — add_roster_wgq_ss","text":"roster data frame individual-level data. hh data frame household-level data. id_col Survey unique identifier column (must present roster hh). wgq_disability Dummy roster. One group SS reported lot difficulty . wgq_disability_3 Dummy roster. One group SS reported lot difficulty. wgq_disability_4 Dummy roster. One group SS reported . wgq_vision_3 Dummy roster. Group vision reported lot difficulty. wgq_hearing_3 Dummy roster. Group hearing reported lot difficulty. wgq_mobility_3 Dummy roster. Group mobility reported lot difficulty. wgq_cognition_3 Dummy roster. Group cognition reported lot difficulty. wgq_self_care_3 Dummy roster. Group self care reported lot difficulty. wgq_communication_3 Dummy roster. Group communication reported lot difficulty. wgq_vision_4 Dummy roster. Group vision reported . wgq_hearing_4 Dummy roster. Group hearing reported . wgq_mobility_4 Dummy roster. Group mobility reported . wgq_cognition_4 Dummy roster. Group cognition reported . wgq_self_care_4 Dummy roster. Group self care reported . wgq_communication_4 Dummy roster. Group communication reported .","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_roster_wgq_ss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add summarized individual WG-SS data to the household data — add_roster_wgq_ss","text":"hh fifteen new columns: component dummy levels 3 4, disability level 3, level 4, level 3 4 together (summarized household).","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_roster_wgq_ss.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add summarized individual WG-SS data to the household data — add_roster_wgq_ss","text":"used roster_wgq_ss()","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_sanitation_facility_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Sanitation facility classification — add_sanitation_facility_cat","title":"Sanitation facility classification — add_sanitation_facility_cat","text":"add_sanitation_facility_cat() recodes types sanitation facilities, add_sharing_sanitation_facility_cat() recodes sharing status sanitation facility, add_sharing_sanitation_facility_num_ind() recodes number individuals sharing sanitation facility.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_sanitation_facility_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sanitation facility classification — add_sanitation_facility_cat","text":"","code":"add_sanitation_facility_cat(   df,   sanitation_facility = \"wash_sanitation_facility\",   improved = c(\"flush_piped_sewer\", \"flush_septic_tank\", \"flush_pit_latrine\",     \"flush_dnk_where\", \"pit_latrine_slab\", \"twin_pit_latrine_slab\",     \"ventilated_pit_latrine_slab\", \"container\", \"compost\"),   unimproved = c(\"flush_open_drain\", \"flush_elsewhere\", \"pit_latrine_wo_slab\", \"bucket\",     \"hanging_toilet\", \"plastic_bag\"),   none = \"none\",   undefined = c(\"other\", \"dnk\", \"pnta\") )  add_sharing_sanitation_facility_cat(   df,   sharing_sanitation_facility = \"wash_sanitation_facility_sharing_yn\",   yes = \"yes\",   no = \"no\",   undefined = c(\"dnk\", \"pnta\"),   sanitation_facility = \"wash_sanitation_facility\",   skipped_sanitation_facility = NULL )  add_sharing_sanitation_facility_num_ind(   df,   sharing_sanitation_facility_cat = \"wash_sharing_sanitation_facility_cat\",   levels = c(\"shared\", \"not_shared\", \"not_applicable\", \"undefined\"),   sanitation_facility_sharing_n = \"wash_sanitation_facility_sharing_n\",   hh_size = \"hh_size\",   weight = \"weight\" )"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/add_sanitation_facility_cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sanitation facility classification — add_sanitation_facility_cat","text":"df data frame. sanitation_facility Component column: Sanitation facility types. improved Character vector responses codes Improved facilities. unimproved Character vector responses codes Unimproved facilities. none Character vector responses codes sanitation facility/Open defecation. undefined Character vector responses codes, fit category, e.g., c(\"dnk\", \"pnta\", \"\"). sharing_sanitation_facility Component column: Number people facility shared. yes Character vector responses codes Yes. Character vector responses codes . skipped_sanitation_facility Character vector responses codes skipped sanitation facility. sharing_sanitation_facility_cat Component column: sanitation facility shared. levels Character vector responses codes, including first following order: Shared, shared, applicable, Undefined. sanitation_facility_sharing_n Component column: number people sharing sanitation facility. hh_size Column household size. weight Column survey weights.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/are_cols_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop statement values are not numeric — are_cols_numeric","title":"Stop statement values are not numeric — are_cols_numeric","text":"Stop statement values numeric","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/are_cols_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop statement values are not numeric — are_cols_numeric","text":"","code":"are_cols_numeric(df, cols)"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/are_cols_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop statement values are not numeric — are_cols_numeric","text":"df data frame cols vector column names (quoted)","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/are_cols_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop statement values are not numeric — are_cols_numeric","text":"stop statement","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/are_values_in_range.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop statement values are not in range — are_values_in_range","title":"Stop statement values are not in range — are_values_in_range","text":"Stop statement values range","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/are_values_in_range.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop statement values are not in range — are_values_in_range","text":"","code":"are_values_in_range(df, cols, lower = 0, upper = 7)"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/are_values_in_range.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop statement values are not in range — are_values_in_range","text":"df data frame cols vector column names (quoted) lower Lower bound upper Upper bound","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/are_values_in_range.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop statement values are not in range — are_values_in_range","text":"stop statement","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/are_values_in_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop statement values are not in set — are_values_in_set","title":"Stop statement values are not in set — are_values_in_set","text":"Stop statement values set","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/are_values_in_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop statement values are not in set — are_values_in_set","text":"","code":"are_values_in_set(df, cols, set)"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/are_values_in_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop statement values are not in set — are_values_in_set","text":"df data frame cols vector column names (quoted) set vector values","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/are_values_in_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop statement values are not in set — are_values_in_set","text":"stop statement","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/drinking_water_quantity.html","id":null,"dir":"Reference","previous_headings":"","what":"Drinking water quantity classification - 5-point scale — drinking_water_quantity","title":"Drinking water quantity classification - 5-point scale — drinking_water_quantity","text":"drinking_water_quantity() recodes quantity drinking availability, drinking_water_quantity_score() classifies household 5-point scale.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/drinking_water_quantity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drinking water quantity classification - 5-point scale — drinking_water_quantity","text":"","code":"drinking_water_quantity(   df,   drinking_water_quantity = \"drinking_water_quantity\",   level_codes = c(\"always\", \"often\", \"sometimes\", \"rarely\", \"never\", \"dont_know\") )  drinking_water_quantity_score(   df,   drinking_water_quantity_cat = \"drinking_water_quantity_cat\",   level_codes = c(\"always\", \"often\", \"sometimes\", \"rarely\", \"never\") )"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/drinking_water_quantity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drinking water quantity classification - 5-point scale — drinking_water_quantity","text":"df data frame. drinking_water_quantity Component column: Drinking water quantity. level_codes Character vector responses codes, including first following order: \"Always (20 times)\", \"Often (11-20 times)\", \"Sometimes (3–10 times)\", \"Rarely (1–2 times)\", \"Never (0 times)\", e.g. c(\"always\", \"often\", \"sometimes\", \"rarely\", \"never\"). drinking_water_quantity_cat Component column: drinking water quantity categories.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/drinking_water_quantity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drinking water quantity classification - 5-point scale — drinking_water_quantity","text":"One new column: 5-point scale 1 5 (drinking_water_quantity_class).","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/drinking_water_source.html","id":null,"dir":"Reference","previous_headings":"","what":"Drinking water source classification — drinking_water_source","title":"Drinking water source classification — drinking_water_source","text":"drinking_water_source() recodes types water sources, time_to_fetch_water() categorical time fetch water according chosen threshold, drinking_water_source_score() classifies household/individual 5-point scale.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/drinking_water_source.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drinking water source classification — drinking_water_source","text":"","code":"drinking_water_source(   df,   drinking_water_source = \"drinking_water_source\",   improved,   unimproved,   surface_water,   na )  time_to_fetch_water(   df,   time_to_fetch_water,   above_threshold,   below_threshold,   premises,   na )  drinking_water_source_score(   df,   drinking_water_source_cat = \"drinking_water_source_cat\",   drinking_water_source_levels = c(\"improved\", \"unimproved\", \"surface_water\"),   time_to_fetch_water_cat = \"time_to_fetch_water_cat\",   time_to_fetch_water_levels = c(\"premises\", \"below_threshold\", \"above_threshold\") )"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/drinking_water_source.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drinking water source classification — drinking_water_source","text":"df data frame. drinking_water_source Component column: Water source types. improved Character vector responses codes, \"Protected well\" \"Public tap\", e.g., c(\"protected_well\", \"public_tap\"). unimproved Character vector responses codes, \"Unprotected well\" \"Unprotected spring\", e.g., c(\"unprotected_well\", \"unprotected_spring\"). surface_water Character vector responses codes, \"Lake\" \"River, e.g., c(\"lake\", \"river\"). na Character vector responses codes, fit category, e.g., c(\"\"). time_to_fetch_water Component column: Time fetch water. above_threshold Character vector responses codes, \"30 minutes 59 minutes\" \"1 hour \", e.g., c(\"30mins_to_59mins\", \"1hour_above\"). below_threshold Character vector responses codes, \"5 14 minutes\" \"15 minutes 29 minutes\", e.g., c(\"5mins_to_14mins\", \"15mins_to_29mins\"). premises Character vector responses codes, \"premises\", e.g., c(\"premises\"). drinking_water_source_cat Component column: categories drinking water sources. drinking_water_source_levels Drinking water sources levels - order: improved, unimproved, surface water. time_to_fetch_water_cat Component column: categories time fetch water. time_to_fetch_water_levels Time fetch water levels - order: premises, threshold, threshold.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/drinking_water_source.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drinking water source classification — drinking_water_source","text":"dataframe new column. drinking_water_source(), recoded column water sources improved, unimproved surface water (drinking_water_source_cat); time_to_fetch_water(), recoded column times fetch water according chosen thresholds (time_to_fetch_water_cat); drinking_water_source_score(), 5-point scale 1 5 (drinking_water_source_score).","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/drinking_water_source.html","id":"details-on-the-point-scale","dir":"Reference","previous_headings":"","what":"Details on the 5-point scale","title":"Drinking water source classification — drinking_water_source","text":"classification computed follows: Level 5: Surface water; Level 4: Unimproved water source; Level 3: Improved water source 30 minutes return time; Level 2: Improved water source within 30 minutes return time; Level 1: Improved water source premises.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/dummy_raw_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Some MSNA dummy data A list of datasets with ","title":"Some MSNA dummy data A list of datasets with ","text":"MSNA dummy data list datasets \"main\" household-level, \"roster\" demographics, \"edu_ind\" individual education variables, \"health_ind\" individual health variables, \"nut_ind\" individual nutrition variables.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/dummy_raw_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Some MSNA dummy data A list of datasets with ","text":"","code":"dummy_raw_data"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/dummy_raw_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Some MSNA dummy data A list of datasets with ","text":"list tibbles","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/handwashing_facility.html","id":null,"dir":"Reference","previous_headings":"","what":"Handwashing facility classification — handwashing_facility","title":"Handwashing facility classification — handwashing_facility","text":"handwashing_facility() recodes types handwasing facility, handwashing_facility_score() classifies household/individual 2-point scale.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/handwashing_facility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handwashing facility classification — handwashing_facility","text":"","code":"handwashing_facility(   df,   handwashing_facility = \"handwashing_facility\",   soap_and_water = c(\"yes_soap_water\"),   none = c(\"no\", \"yes_only_soap\", \"yes_only_water\"),   na = c(\"dnk\", \"no_access\") )  handwashing_facility_score(   df,   handwashing_facility_cat = \"handwashing_facility_cat\",   handwashing_facility_levels = c(\"none\", \"soap_and_water\") )"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/handwashing_facility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handwashing facility classification — handwashing_facility","text":"df data frame. handwashing_facility Component column: Handwashing facility types. soap_and_water Character vector responses codes, \"Yes, available soap water (seen)\" , e.g., c(\"yes_soap_water\"). none Character vector responses codes, \"Yes, soap\", \"Yes, water\" \"\", e.g., c(\"\", \"yes_only_soap\", \"yes_only_water\"). na Character vector responses codes, \"know\" \"access\", e.g., c(\"dnk\",\"no_access\"). handwashing_facility_cat Component column: Categories handwashing facility. handwashing_facility_levels Handwashing facility levels - order: none, soap water.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/handwashing_facility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handwashing facility classification — handwashing_facility","text":"data frame new column named handwashing_facility_cat (handwashing_facility()) handwashing_facility_score (handwashing_facility_score()) appended.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/handwashing_facility.html","id":"details-on-the-point-scale","dir":"Reference","previous_headings":"","what":"Details on the 2-point scale","title":"Handwashing facility classification — handwashing_facility","text":"classification computed follows: Level 2: handwashing facility available, water soap available handwashing facility; Level 1: Handwashing facility available soap water;","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/hwise.html","id":null,"dir":"Reference","previous_headings":"","what":"HWISE scores - Household Water Insecurity Experiences (HWISE) Scale — hwise","title":"HWISE scores - Household Water Insecurity Experiences (HWISE) Scale — hwise","text":"HWISE scores - Household Water Insecurity Experiences (HWISE) Scale","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/hwise.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HWISE scores - Household Water Insecurity Experiences (HWISE) Scale — hwise","text":"","code":"hwise(   df,   hwise_worry = \"hwise_worry\",   hwise_interrupt = \"hwise_interrupt\",   hwise_clothes = \"hwise_clothes\",   hwise_plans = \"hwise_plans\",   hwise_food = \"hwise_food\",   hwise_hands = \"hwise_hands\",   hwise_body = \"hwise_body\",   hwise_drink = \"hwise_drink\",   hwise_angry = \"hwise_angry\",   hwise_sleep = \"hwise_sleep\",   hwise_none = \"hwise_none\",   hwise_shame = \"hwise_shame\",   level_codes = c(\"never\", \"rarely\", \"sometimes\", \"often\", \"always\", \"do_not_know\",     \"prefer_not_to_answer\", \"not_applicable\") )"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/hwise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HWISE scores - Household Water Insecurity Experiences (HWISE) Scale — hwise","text":"df data frame hwise_worry Component column: Worry. hwise_interrupt Component column: Interrupt. hwise_clothes Component column: Clothes. hwise_plans Component column: Plans. hwise_food Component column: Food. hwise_hands Component column: Hands. hwise_body Component column: Body. hwise_drink Component column: Drink. hwise_angry Component column: Angry. hwise_sleep Component column: Sleep. hwise_none Component column: None. hwise_shame Component column: Shame. level_codes Character vector responses codes, including first following order: \"Never (0 times)\", \"Rarely (1–2 times)\", \"Sometimes (3–10 times)\", \"Often (11-20 times)\", \"Always (20 times)\", \"know\", \"Prefer answer\", \"applicable\", e.g. c(\"never\", \"rarely\", \"sometimes\", \"often\", \"always\", \"do_not_know\", \"prefer_not_to_answer\", \"not_applicable\").","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/hwise.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HWISE scores - Household Water Insecurity Experiences (HWISE) Scale — hwise","text":"Sixteen new columns: component score (hwise_score_*), overall score (hwise_score), dummy water insecurity (hwise_insecure), broader categories (hwise_cat), detailed categories (hwise_cat_details).","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/hwise_brief.html","id":null,"dir":"Reference","previous_headings":"","what":"HWISE scores - Brief Household Water Insecurity Experiences (HWISE-4) Scale — hwise_brief","title":"HWISE scores - Brief Household Water Insecurity Experiences (HWISE-4) Scale — hwise_brief","text":"HWISE scores - Brief Household Water Insecurity Experiences (HWISE-4) Scale","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/hwise_brief.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HWISE scores - Brief Household Water Insecurity Experiences (HWISE-4) Scale — hwise_brief","text":"","code":"hwise_brief(   df,   hwise_worry = \"hwise_worry\",   hwise_plans = \"hwise_plans\",   hwise_hands = \"hwise_hands\",   hwise_drink = \"hwise_drink\",   level_codes = c(\"never\", \"rarely\", \"sometimes\", \"often\", \"always\", \"do_not_know\",     \"prefer_not_to_answer\", \"not_applicable\") )"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/hwise_brief.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HWISE scores - Brief Household Water Insecurity Experiences (HWISE-4) Scale — hwise_brief","text":"df data frame hwise_worry Component column: Worry. hwise_plans Component column: Plans. hwise_hands Component column: Hands. hwise_drink Component column: Drink. level_codes Character vector responses codes, including first following order: \"Never (0 times)\", \"Rarely (1–2 times)\", \"Sometimes (3–10 times)\", \"Often (11-20 times)\", \"Always (20 times)\", \"know\", \"Prefer answer\", \"applicable\", e.g. c(\"never\", \"rarely\", \"sometimes\", \"often\", \"always\", \"do_not_know\", \"prefer_not_to_answer\", \"not_applicable\").","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/hwise_brief.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"HWISE scores - Brief Household Water Insecurity Experiences (HWISE-4) Scale — hwise_brief","text":"Eight new columns: component score (hwise_brief_score_*), overall score (hwise_brief_score), dummy water insecurity (hwise_brief_insecure), broader categories (hwise_brief_cat), detailed categories (hwise_cat_details).","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/if_not_in_stop.html","id":null,"dir":"Reference","previous_headings":"","what":"Stop statement ","title":"Stop statement ","text":"Stop statement \"colnames\" colnames","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/if_not_in_stop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stop statement ","text":"","code":"if_not_in_stop(df, cols, df_name, arg = NULL)"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/if_not_in_stop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stop statement ","text":"df data frame cols vector column names (quoted) df_name Provide tibble name character string arg Default NULL.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/if_not_in_stop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stop statement ","text":"stop statement","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/roster_wgq_ss.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare dummy variables for each WG-SS component (individual data) — roster_wgq_ss","title":"Prepare dummy variables for each WG-SS component (individual data) — roster_wgq_ss","text":"Prepare dummy variables WG-SS component (individual data)","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/roster_wgq_ss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare dummy variables for each WG-SS component (individual data) — roster_wgq_ss","text":"","code":"roster_wgq_ss(   roster,   ind_age = \"ind_age\",   vision = \" wgq_vision\",   hearing = \"wgq_hearing\",   mobility = \"wgq_mobility\",   cognition = \"wgq_cognition\",   self_care = \"wgq_self_care\",   communication = \"wgq_communication\",   level_codes = c(\"no_difficulty\", \"some_difficulty\", \"lot_of_difficulty\", \"cannot_do\") )"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/roster_wgq_ss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare dummy variables for each WG-SS component (individual data) — roster_wgq_ss","text":"roster data frame individual-level data. ind_age individual age column. vision Vision component column. hearing Hearing component column. mobility Mobility component column. cognition Cognition component column. self_care Self-care component column. communication Communication component column. level_codes Character vector responses codes, including first following order: \"difficulty\", \"difficulty\", \"lot difficulty\", \"\", e.g. c(\"no_difficulty\", \"some_difficulty\", \"lot_of_difficulty\", \"cannot_do\").","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/roster_wgq_ss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare dummy variables for each WG-SS component (individual data) — roster_wgq_ss","text":"Fifteen new columns: component dummy levels 3 4, disability level 3, level 4, level 3 4 together.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/subvec_in.html","id":null,"dir":"Reference","previous_headings":"","what":"Subvec in — subvec_in","title":"Subvec in — subvec_in","text":"Subvec ","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/subvec_in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subvec in — subvec_in","text":"","code":"subvec_in(vector, set)"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/subvec_in.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subvec in — subvec_in","text":"vector vector subset set set-vector","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/subvec_in.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subvec in — subvec_in","text":"subset list vector","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/subvec_not_in.html","id":null,"dir":"Reference","previous_headings":"","what":"Subvec not in — subvec_not_in","title":"Subvec not in — subvec_not_in","text":"Subvec ","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/subvec_not_in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subvec not in — subvec_not_in","text":"","code":"subvec_not_in(vector, set)"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/subvec_not_in.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subvec not in — subvec_not_in","text":"vector vector subset set set-vector","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/subvec_not_in.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subvec not in — subvec_not_in","text":"subset vector set","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/time_to_fetch_water_int_to_char.html","id":null,"dir":"Reference","previous_headings":"","what":"Shape the time to fetch water to recoding state — time_to_fetch_water_int_to_char","title":"Shape the time to fetch water to recoding state — time_to_fetch_water_int_to_char","text":"time_to_fetch_water_int_to_char() recodes time fetch water categorical thresholds (incl. ) time_to_fetch_water_combine() combines recoded integer variable character variable one final character time fetch water. See 2023 MSNA indicator bank information.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/time_to_fetch_water_int_to_char.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shape the time to fetch water to recoding state — time_to_fetch_water_int_to_char","text":"","code":"time_to_fetch_water_int_to_char(   df,   var,   int = c(0, 30, 60, 600),   char = c(\"premises\", \"30_min_or_less\", \"more_than_30_to_1hr\", \"more_than_1hr\"),   int_dontknow = c(-999, 999),   char_dontknow = \"dnk\",   sl_piped_into_dwelling = TRUE,   var_piped_into_dwelling = \"drinking_water_source\",   codes_piped_into_dwelling = c(\"piped_into_dwelling\") )  time_to_fetch_water_combine(   df,   var_int_to_char = \"time_to_fetch_water_int_to_char\",   var_dontknow = \"time_to_fetch_water_dontknow\",   level_codes = c(\"premises, 30_min_or_less, more_than_30_to_1hr, more_than_1hr, dnk\") )"},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/time_to_fetch_water_int_to_char.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shape the time to fetch water to recoding state — time_to_fetch_water_int_to_char","text":"df data frame. var name integer variable recoded. int vector integer thresholds define thresholds. char vector labels category. labels correspond categories defined thresholds. first label corresponds values less equal first threshold, second label corresponds values greater first threshold less equal second threshold, . int_dontknow vector integer values treated \"know\" replaced char_dontknow. char_dontknow character value used label \"know\" values. sl_piped_into_dwelling logical value indicating whether skip logic implemented using variable var_piped_into_dwelling. TRUE, function recode variable var_piped_into_dwelling premises whenever codes_piped_into_dwelling recoding var. var_piped_into_dwelling name variable recoded premises. codes_piped_into_dwelling vector codes recoded premises. var_int_to_char recoded integer variable. var_dontknow character variable know. level_codes character level codes.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/reference/time_to_fetch_water_int_to_char.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shape the time to fetch water to recoding state — time_to_fetch_water_int_to_char","text":"input data frame recoded variable added new column.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/news/index.html","id":"humind-01900","dir":"Changelog","previous_headings":"","what":"humind 0.1.900","title":"humind 0.1.900","text":"Expect many breaking changes moving towards consistent coherent package 2024 MSNAs Food security indicators imported impactR4PHU, potentially Public Health functions.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/news/index.html","id":"humind-0053","dir":"Changelog","previous_headings":"","what":"humind 0.0.5.3","title":"humind 0.0.5.3","text":"Bug fix: rsci() now correctly adds rcsi_score variable.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/news/index.html","id":"humind-0052","dir":"Changelog","previous_headings":"","what":"humind 0.0.5.2","title":"humind 0.0.5.2","text":"Breaking change: drinking_water_quantity() now recodes frequencies days without drinking water, drinking_water_quantity_score() assigns score 5-point scale. Added: time_to_fetch_water_int_char() time_to_fetch_water_combine() recode combine variables time fetch water.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/news/index.html","id":"humind-0051","dir":"Changelog","previous_headings":"","what":"humind 0.0.5.1","title":"humind 0.0.5.1","text":"Bug fix breaking change: handwashing_facility() now recodes types handwashing facility. Added: handwashing_facility_score() calculates score 2-point scale based handwashing_facility()","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/news/index.html","id":"humind-005","dir":"Changelog","previous_headings":"","what":"humind 0.0.5","title":"humind 0.0.5","text":"Breaking changes: revamp water sources sanitation facilities fonctions approach food security functions. Added: drinking_water_source() recodes types water sources, time_to_fetch_water() time fetch water according chosen threshold, drinking_water_source_score() classify household/individual 5-point scale. Added: sanitation_facility() recodes types sanitation facilities, sharing_sanitation_facility() recodes number people sharing sanitation facility, sanitation_facility_score() classify household 5-point scale.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/news/index.html","id":"humind-004","dir":"Changelog","previous_headings":"","what":"humind 0.0.4","title":"humind 0.0.4","text":"Added water_source(): Water source 5-point-scale. Added sanitation_facility(): Sanitation facility 5-point scale. Added handwashing_facility(): Handwashing facility 2-point scale. Added drinking_water_quantity(): Drinking water quantity 5-point scale.","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/news/index.html","id":"humind-003","dir":"Changelog","previous_headings":"","what":"humind 0.0.3","title":"humind 0.0.3","text":"Added hdds(): Household Dietary Diversity Scores (HDDS) (#5) Added fies(): Food Insecurity Experience Scale (FIES) #6 Bug fix: error lcsi() aggregated categories’ names corrected (#20)","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/news/index.html","id":"humind-002","dir":"Changelog","previous_headings":"","what":"humind 0.0.2","title":"humind 0.0.2","text":"Added: HWISE functions. (#16) Updated: dplyr v1.1.0 dplyr::case_when() revamp. (#) Modified: dependency know goes impactR.utils impactR. (#)","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/news/index.html","id":"humind-001","dir":"Changelog","previous_headings":"","what":"humind 0.0.1","title":"humind 0.0.1","text":"patches github-action pages","code":""},{"path":"https://impact-initiatives-hppu.github.io/humind/news/index.html","id":"humind-0009000","dir":"Changelog","previous_headings":"","what":"humind 0.0.0.9000","title":"humind 0.0.0.9000","text":"Initial commit","code":""}]
